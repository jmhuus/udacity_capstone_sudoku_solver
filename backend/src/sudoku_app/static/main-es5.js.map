{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/board-of-the-day/board-of-the-day.component.ts","webpack:///src/app/board-of-the-day/board-of-the-day.component.html","webpack:///src/app/board/board.component.ts","webpack:///src/app/board/board.component.html","webpack:///src/app/board/board.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/http.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","auth","title","loginUrl","check_token_fragment","user_info","getUserInfo","getLoginUrl","console","log","logout","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","BoardOfTheDayComponent","_http","board_size","payload","getPayload","isAdmin","includes","board_of_the_day","getBlankBoard","user_message","displayBoardOfTheDay","column","row","myClasses","grey_cell","white_cell","response","getBoardOfTheDay","getToken","subscribe","value","JSON","parse","stringify","error","board","board_original","sanitizeBoardData","userInfo","saveBoardOfTheDay","newBoard","Object","length","element","parseInt","event","sanitizeBoard","board_solved","resetBoard","BoardComponent","user_boards","displayUserBoards","getNewBoard","saveBoard","i","push","main_board_id","getUserBoards","chosen_board_index","board_id","deleteBoard","solveBoard","Board","blankBoard","JWTS_LOCAL_KEY","JWTS_ACTIVE_INDEX_KEY","AuthService","fragment","window","location","hash","substr","split","token","set_jwt","localStorage","setItem","decodeJWT","jwtservice","decodeToken","link","providedIn","HttpService","http","solve_url","httpOptions","headers","body","post","difficulty","patch","get","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,EAErB;AAAED,UAAI,EAAE,WAAR;AAAqBC,eAAS,EAAE;AAAhC,KAFqB,CAAvB;;QASaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBJ,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBG,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBJ,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACf7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOgB;;AAAuB;;AAAqB;;AAAK;;AAAI;;;;;;AAA3B;;AAAA;;;;;;AAC1B;;AAAsB;;AAAtB;;;;;;AAA2B;;AAAA;;;;;;AAC3B;;AAAsB;;AAAG;;AAAuB;;AAAI;;;;;;AAA3B;;AAAA;;;;;;;;AACzB;;AAAsB;;AAAW;AAAA;;AAAA;;AAAA;AAAA;;AAAmB;;AAAM;;AAAI;;;;QDFjEQ,Y;AAKX,4BAAoBC,IAApB,EAAuC;AAAA;;AAAnB,aAAAA,IAAA,GAAAA,IAAA;AAJpB,aAAAC,KAAA,GAAgB,wBAAhB;AAEA,aAAAC,QAAA,GAAmB,EAAnB;AAIC;;;;mCAEO;AACN,eAAKF,IAAL,CAAUG,oBAAV;AACA,eAAKC,SAAL,GAAiB,KAAKJ,IAAL,CAAUK,WAAV,EAAjB;AACA,eAAKH,QAAL,GAAgB,KAAKF,IAAL,CAAUM,WAAV,EAAhB;AACAC,iBAAO,CAACC,GAAR,CAAY,KAAKN,QAAjB;AAED;;;iCAEK;AACJ,eAAKF,IAAL,CAAUS,MAAV;AACA,eAAKL,SAAL,GAAiB,IAAjB;AACD;;;;;;;uBApBUL,Y,EAAY,mI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,e;AAAA,a;AAAA,0N;AAAA;AAAA;ACRzB;;AACI;;AACI;;AAAyB;;AAAa;;AACtC;;AACI;;AACI;;AAAI;;AAA2B;;AAAgB;;AAAI;;AACnD;;AAAI;;AAA4C;;AAAS;;AAAI;;AAC7D;;AACA;;AACA;;AACA;;AACJ;;AACJ;;AACJ;;AACJ;;AAGA;;AACE;;AACF;;;;AAZoB;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;;;;sEDFPA,Y,EAAY;cALxB,uDAKwB;eALd;AACTW,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAwBaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBANJ,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,CAMI;;;;0HAGFA,S,EAAS;AAAA,uBAblB,2DAakB,EAZlB,qEAYkB,EAXlB,mGAWkB;AAXI,kBAGtB,uEAHsB,EAItB,oEAJsB,EAKtB,qEALsB,EAMtB,0DANsB;AAWJ,O;AALP,K;;;;;sEAKFA,S,EAAS;cAfrB,sDAeqB;eAfZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,qEAFY,EAGZ,mGAHY,CADN;AAMRhB,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,CAND;AAYRiB,mBAAS,EAAE,EAZH;AAaRC,mBAAS,EAAE,CAAC,2DAAD;AAbH,S;AAeY,Q;;;;;;;;;;;;;;;;;;ACxBtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACYI;;AACI;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,qDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,qDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,qDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,qDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,sDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,sDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,sDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,sDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACA;;AAAI;;AAAiD;AAAA;;AAAA;;AAAA;;AAAA,sDAAuC,CAAvC,IAAwC,MAAxC;AAAwC,SAAxC;;AAA2C;;AAAhG;;AACJ;;;;;;;;AATe;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;AACf;;AAAA;;AAAe,sGAA0B,SAA1B,EAA0B,sCAA1B;;;;;;;;AAVhC;;AAAgC;AAAA;;AAAA;;AAAA;AAAA;;AAC9B;;AAWF;;;;;;AAXM;;AAAA;;;;;;;;AAeN;;AAAwB;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAU;;;;QDhB7CC,sB;AAOX,sCAAoBC,KAApB,EAA+ClB,IAA/C,EAAkE;AAAA;;AAA9C,aAAAkB,KAAA,GAAAA,KAAA;AAA2B,aAAAlB,IAAA,GAAAA,IAAA;AAJtC,aAAAmB,UAAA,GAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAb;AAKP,YAAIC,OAAO,GAAG,KAAKpB,IAAL,CAAUqB,UAAV,EAAd;;AACA,YAAID,OAAO,IAAI,IAAf,EAAqB;AAAE;AAAS;;AAChC,aAAKE,OAAL,GAAeF,OAAO,CAAC,aAAD,CAAP,CAAuBG,QAAvB,CAAgC,uBAAhC,CAAf;AACD;;;;mCAEO;AACN;AACA,eAAKC,gBAAL,GAAwB,mDAAMC,aAAN,EAAxB;AACA,eAAKC,YAAL,GAAoB,EAApB,CAHM,CAKN;;AACA,eAAKC,oBAAL;AACD,S,CAED;;;;iCACSC,M,EAAQC,G,EAAK;AACpB,cAAIC,SAAS,GAAG;AACdC,qBAAS,EAAG,IAAIF,GAAJ,IAAWA,GAAG,IAAI,CAAnB,IAA0B,IAAID,MAAJ,IAAcA,MAAM,IAAI,CAD/C;AAEdI,sBAAU,EAAG,IAAIH,GAAJ,IAAWA,GAAG,IAAI,CAAnB,IAA0B,IAAID,MAAJ,IAAcA,MAAM,IAAI;AAFhD,WAAhB;AAIA,iBAAOE,SAAP;AACD,S,CAED;;;;+CACoB;AAAA;;AAClB,cAAIG,QAAQ,GAAuB,KAAKf,KAAL,CAAWgB,gBAAX,CAA4B,KAAKlC,IAAL,CAAUmC,QAAV,EAA5B,CAAnC;;AACAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AAEP;AACA,gBAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,mBAAI,CAACX,YAAL,GAAoB,+BAApB;AACD,aALM,CAOP;;;AACA,iBAAI,CAACF,gBAAL,GAAwBc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,IAAI,kDAAJ,CAChDH,KAAK,CAAC,UAAD,CAD2C,EAEhDA,KAAK,CAAC,YAAD,CAF2C,EAGhDA,KAAK,CAAC,mBAAD,CAH2C,EAIhDA,KAAK,CAAC,YAAD,CAJ2C,CAAf,CAAX,CAAxB;AAKD,WAdH,EAeE,UAAAI,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAfP,EAgBE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WAhBF;AAkBD,S,CAED;;;;qCACU;AACR,eAAKgB,gBAAL,CAAsBkB,KAAtB,GAA8BJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKhB,gBAAL,CAAsBmB,cAArC,CAAX,CAA9B;AACD,S,CAED;;;;oCACS;AAAA;;AACP,cAAID,KAAK,GAAU,KAAKE,iBAAL,EAAnB;AACA,cAAIC,QAAQ,GAAG,KAAK7C,IAAL,CAAUK,WAAV,EAAf;;AACA,cAAIwC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,iBAAKnB,YAAL,GAAoB,iDAApB;AACA;AACD;;AACD,cAAIO,QAAQ,GAAuB,KAAKf,KAAL,CAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoCG,QAApC,EAA8C,KAAK7C,IAAL,CAAUmC,QAAV,EAA9C,CAAnC;;AACAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AACP,kBAAI,CAACX,YAAL,GAAoB,QAApB;AACD,WAHH,EAIE,UAAAe,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAJP,EAKE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WALF;AAOD,S,CAED;;;;4CACiB;AACf,cAAIuC,QAAQ,GAAUT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKhB,gBAApB,CAAX,CAAtB;;AACA,eAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmB,MAAM,CAAC3D,IAAP,CAAY0D,QAAQ,CAACL,KAArB,EAA4BO,MAApD,EAA4DpB,GAAG,EAA/D,EAAmE;AACjE,iBAAK,IAAID,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGmB,QAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBoB,MAAlD,EAA0DrB,MAAM,EAAhE,EAAoE;AAClE,kBAAMsB,OAAO,GAAGH,QAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,CAAhB;;AACA,kBAAG,OAAOsB,OAAP,IAAkB,QAArB,EAA8B;AAC5BH,wBAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,IAA8BuB,QAAQ,CAACD,OAAD,CAAtC;AACD,eAFD,MAEO;AACLH,wBAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,IAA8BsB,OAA9B;AACD;AACF;AACF;;AAED,iBAAOH,QAAP;AACD,S,CAED;;;;gCACQK,K,EAAK;AACX,cAAIC,aAAa,GAAG,KAAKT,iBAAL,EAApB;;AACA,cACEN,IAAI,CAACE,SAAL,CAAea,aAAa,CAACX,KAA7B,KACAJ,IAAI,CAACE,SAAL,CAAea,aAAa,CAACC,YAA7B,CAFF,EAE8C;AAC5C,iBAAK5B,YAAL,GAAoB,yBAApB;AACD,WAJD,MAIO;AACL,iBAAKA,YAAL,GAAoB,mBAApB;AACD;AACF;;;;;;;uBAxGUT,sB,EAAsB,mI,EAAA,mI;AAAA,K;;;YAAtBA,sB;AAAsB,2C;AAAA,e;AAAA,a;AAAA,yL;AAAA;AAAA;ACXnC;;AAAI;;AAAgB;;AACpB;;AAAG;;AAGH;;AACA;;AACA;;AACA;;AACE;;AAAI;;AAAkB;;AACxB;;AACA;;AACE;;AAaF;;AACA;;AACE;;AAAQ;AAAA,mBAAS,IAAAsC,UAAA,EAAT;AAAqB,WAArB;;AAAuB;;AAAW;;AAC1C;;AACF;;;;AApBM;;AAAA;;AAGG;;AAAA;;AAgBC;;AAAA;;;;;;;;;sEDhBGtC,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTP,kBAAQ,EAAE,sBADD;AAETC,qBAAW,EAAE,mCAFJ;AAGTC,mBAAS,EAAE,CAAC,mCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEXnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACEI;;AACI;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,0CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACA;;AAAI;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA,2CAA4B,CAA5B,IAA6B,MAA7B;AAA6B,SAA7B;;AAAgC;;AAAtE;;AACJ;;;;;;;;AATe;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;AACA;;AAAA,sGAA0B,SAA1B,EAA0B,2BAA1B;;;;;;;;AAVjB;;AAAqB;AAAA;;AAAA;;AAAA;AAAA;;AACnB;;AAWF;;;;;;AAXM;;AAAA;;;;;;;;AAeN;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAAqB;;AAAS;;;;;;;;AAC3D;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAW;;;;;;;;AAC/D;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAU;;;;;;;;AASvD;;AACI;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACA;;AAAI;;AAA2D;AAAA;;AAAA;;AAAA;;AAAA,6CAAiC,CAAjC,IAAkC,MAAlC;AAAkC,SAAlC;;AAA8C;;AAA7G;;AACJ;;;;;;;;;;AATe;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;AACA;;AAAA,wGAA0B,SAA1B,EAA0B,8BAA1B;;;;;;;;AAZrB;;AACE;;AAAI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACF;;AACE;;AAWF;;AACA;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;AAAY;;AAC/C;;AACF;;;;;;AAdU;;AAAA;;;;;;AALZ;;AACE;;AAAI;;AAAY;;AAChB;;AAkBF;;;;;;AAlBkC;;AAAA;;;;QDbrB4C,c;AAMT,8BAAoBtC,KAApB,EAA+ClB,IAA/C,EAAkE;AAAA;;AAA9C,aAAAkB,KAAA,GAAAA,KAAA;AAA2B,aAAAlB,IAAA,GAAAA,IAAA;AAHtC,aAAAmB,UAAA,GAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAb;AAG4D;;;;mCAE1D;AACT;AACA,eAAKuB,KAAL,GAAa,6CAAMjB,aAAN,EAAb;AACA,eAAKC,YAAL,GAAoB,EAApB,CAHS,CAKT;AACA;;AACA,cAAI,KAAK1B,IAAL,CAAUK,WAAV,MAA2B,IAA3B,IAAmC,KAAKoD,WAAL,IAAoB,IAA3D,EAAiE;AAC/D,iBAAKC,iBAAL;AACD;AACF,S,CAED;;;;iCACS9B,M,EAAQC,G,EAAK;AACpB,cAAIC,SAAS,GAAG;AACdC,qBAAS,EAAG,IAAIF,GAAJ,IAAWA,GAAG,IAAI,CAAnB,IAA0B,IAAID,MAAJ,IAAcA,MAAM,IAAI,CAD/C;AAEdI,sBAAU,EAAG,IAAIH,GAAJ,IAAWA,GAAG,IAAI,CAAnB,IAA0B,IAAID,MAAJ,IAAcA,MAAM,IAAI;AAFhD,WAAhB;AAIA,iBAAOE,SAAP;AACD,S,CAGD;;;;2CACmB;AACjB,eAAKJ,YAAL,GAAoB,iBAApB;AACD;;;qCAEY;AACX,eAAKgB,KAAL,CAAWA,KAAX,GAAmBJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKE,KAAL,CAAWY,YAA1B,CAAX,CAAnB;AACD,S,CAED;;;;mCACW;AAAA;;AACT;AACA,cAAIrB,QAAQ,GAAuB,KAAKf,KAAL,CAAWyC,WAAX,CAC/B,MAD+B,EACvB,KAAK3D,IAAL,CAAUK,WAAV,EADuB,EACE,KAAKL,IAAL,CAAUmC,QAAV,EADF,CAAnC;;AAEAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AACP,kBAAI,CAACK,KAAL,GAAa,IAAI,4CAAJ,CACXL,KAAK,CAAC,UAAD,CADM,EAEXA,KAAK,CAAC,YAAD,CAFM,EAGXA,KAAK,CAAC,mBAAD,CAHM,EAIXA,KAAK,CAAC,YAAD,CAJM,CAAb,CADO,CAOP;;AACA,kBAAI,CAACqB,iBAAL,CAAuBrB,KAAK,CAAC,UAAD,CAA5B;AACD,WAVH,EAWE,UAAAI,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAXP,EAYE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WAZF;AAcD,S,CAED;;;;qCACa;AACX,eAAKkC,KAAL,CAAWA,KAAX,GAAmBJ,IAAI,CAACC,KAAL,CACjBD,IAAI,CAACE,SAAL,CAAe,KAAKE,KAAL,CAAWC,cAA1B,CADiB,CAAnB;AAED,S,CAED;;;;oCACY;AAAA;;AACV,cAAID,KAAK,GAAU,KAAKE,iBAAL,EAAnB;AACA,cAAIC,QAAQ,GAAG,KAAK7C,IAAL,CAAUK,WAAV,EAAf;;AACA,cAAIwC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,iBAAKnB,YAAL,GAAoB,iDAApB;AACA;AACD;;AACD,cAAIO,QAAQ,GAAuB,KAAKf,KAAL,CAAW0C,SAAX,CAAqBlB,KAArB,EAA4BG,QAA5B,EAAsC,KAAK7C,IAAL,CAAUmC,QAAV,EAAtC,CAAnC;;AACAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AACP,kBAAI,CAACX,YAAL,GAAoB,QAApB,CADO,CAGP;;AACA,kBAAI,CAAC+B,WAAL,GAAmB,EAAnB;;AACA,iBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAAC3D,IAAP,CAAYgD,KAAK,CAAC,aAAD,CAAjB,EAAkCY,MAAtD,EAA8DY,CAAC,EAA/D,EAAmE;AACjE,kBAAMX,OAAO,GAAGb,KAAK,CAAC,aAAD,CAAL,CAAqBwB,CAArB,CAAhB;AACA,kBAAId,QAAQ,GAAU,IAAI,4CAAJ,CACpBG,OAAO,CAAC,UAAD,CADa,EAEpBA,OAAO,CAAC,YAAD,CAFa,EAGpBA,OAAO,CAAC,mBAAD,CAHa,EAIpBA,OAAO,CAAC,YAAD,CAJa,CAAtB;;AAMA,oBAAI,CAACO,WAAL,CAAiBK,IAAjB,CAAsBf,QAAtB;AACD;AACF,WAhBH,EAiBE,UAAAN,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAjBP,EAkBE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WAlBF;AAoBD,S,CAED;;;;4CACiB;AACf,cAAIuC,QAAQ,GAAUT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKE,KAApB,CAAX,CAAtB;;AACA,eAAK,IAAIb,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmB,MAAM,CAAC3D,IAAP,CAAY0D,QAAQ,CAACL,KAArB,EAA4BO,MAApD,EAA4DpB,GAAG,EAA/D,EAAmE;AACjE,iBAAK,IAAID,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGmB,QAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBoB,MAAlD,EAA0DrB,MAAM,EAAhE,EAAoE;AAClE,kBAAMsB,OAAO,GAAGH,QAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,CAAhB;;AACA,kBAAG,OAAOsB,OAAP,IAAkB,QAArB,EAA8B;AAC5BH,wBAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,IAA8BuB,QAAQ,CAACD,OAAD,CAAtC;AACD,eAFD,MAEO;AACLH,wBAAQ,CAACL,KAAT,CAAeb,GAAf,EAAoBD,MAApB,IAA8BsB,OAA9B;AACD;AACF;AACF;;AAED,iBAAOH,QAAP;AACD,S,CAED;;;;gCACQK,K,EAAK;AACX,cAAIC,aAAa,GAAG,KAAKT,iBAAL,EAApB;;AACA,cACEN,IAAI,CAACE,SAAL,CAAea,aAAa,CAACX,KAA7B,KACAJ,IAAI,CAACE,SAAL,CAAea,aAAa,CAACC,YAA7B,CAFF,EAE8C;AAC5C,iBAAK5B,YAAL,GAAoB,yBAApB;AACD,WAJD,MAIO;AACL,iBAAKA,YAAL,GAAoB,mBAApB;AACD;AACF,S,CAED;;;;iCACSmC,C,EAAS;AAChB,eAAKnB,KAAL,GAAaJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,IAAI,4CAAJ,CACrC,KAAKiB,WAAL,CAAiBI,CAAjB,EAAoBrE,EADiB,EAErC,KAAKiE,WAAL,CAAiBI,CAAjB,EAAoBnB,KAFiB,EAGrC,KAAKe,WAAL,CAAiBI,CAAjB,EAAoBP,YAHiB,EAIrC,KAAKG,WAAL,CAAiBI,CAAjB,EAAoBnB,KAJiB,CAAf,CAAX,CAAb;AAKD,S,CAED;;;;4CAC8C;AAAA;;AAAA,cAA5BqB,aAA4B,uEAAJ,IAAI;;AAC5C,cAAI9B,QAAQ,GAAuB,KAAKf,KAAL,CAAW8C,aAAX,CAAyB,KAAKhE,IAAL,CAAUK,WAAV,EAAzB,EAAkD,KAAKL,IAAL,CAAUmC,QAAV,EAAlD,CAAnC;;AACAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AACP;AACA,gBAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAI,EAA9B,EAAkC;AAAE;AAAQ,aAFrC,CAIP;;;AACA,gBAAI4B,kBAAkB,GAAW,CAAjC;;AACA,gBAAIF,aAAa,IAAI,IAArB,EAA2B;AACzB,mBAAK,IAAIF,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGb,MAAM,CAAC3D,IAAP,CAAYgD,KAAZ,EAAmBY,MAArC,EAA6CY,CAAC,EAA9C,EAAkD;AAChD,oBAAIxB,KAAK,CAACwB,CAAD,CAAL,CAASK,QAAT,IAAqBH,aAAzB,EAAwC;AACtCE,oCAAkB,GAAGJ,CAArB;AACD;AACF;AACF,aAZM,CAcP;;;AACA,kBAAI,CAACnB,KAAL,GAAaJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,IAAI,4CAAJ,CACrCH,KAAK,CAAC4B,kBAAD,CAAL,CAA0B,UAA1B,CADqC,EAErC5B,KAAK,CAAC4B,kBAAD,CAAL,CAA0B,YAA1B,CAFqC,EAGrC5B,KAAK,CAAC4B,kBAAD,CAAL,CAA0B,mBAA1B,CAHqC,EAIrC5B,KAAK,CAAC4B,kBAAD,CAAL,CAA0B,YAA1B,CAJqC,CAAf,CAAX,CAAb,CAfO,CAqBP;;AACA,kBAAI,CAACR,WAAL,GAAmB,EAAnB;;AACA,iBAAK,IAAII,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGb,MAAM,CAAC3D,IAAP,CAAYgD,KAAZ,EAAmBY,MAAvC,EAA+CY,EAAC,EAAhD,EAAoD;AAClD,kBAAMX,OAAO,GAAGb,KAAK,CAACwB,EAAD,CAArB;AACA,kBAAId,QAAQ,GAAU,IAAI,4CAAJ,CACpBG,OAAO,CAAC,UAAD,CADa,EAEpBA,OAAO,CAAC,YAAD,CAFa,EAGpBA,OAAO,CAAC,mBAAD,CAHa,EAIpBA,OAAO,CAAC,YAAD,CAJa,CAAtB;;AAMA,oBAAI,CAACO,WAAL,CAAiBK,IAAjB,CAAsBf,QAAtB;AACD;AACF,WAlCH,EAmCE,UAAAN,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAnCP,EAoCE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WApCF;AAsCD;;;oCAEWqD,C,EAAS;AAAA;;AAEnB;AACA,cAAI5B,QAAQ,GAAuB,KAAKf,KAAL,CAAWiD,WAAX,CAAuB,KAAKzB,KAA5B,EAAmC,KAAK1C,IAAL,CAAUmC,QAAV,EAAnC,CAAnC;;AACAF,kBAAQ,CAACG,SAAT,CACE,UAAAC,KAAK,EAAI;AACP,kBAAI,CAACX,YAAL,GAAoB,EAApB,CADO,CAGP;;AACA,kBAAI,CAAC+B,WAAL,GAAmB,EAAnB;;AACA,iBAAK,IAAII,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGb,MAAM,CAAC3D,IAAP,CAAYgD,KAAZ,EAAmBY,MAAvC,EAA+CY,GAAC,EAAhD,EAAoD;AAClD,kBAAMX,OAAO,GAAGb,KAAK,CAACwB,GAAD,CAArB;AACA,kBAAId,QAAQ,GAAU,IAAI,4CAAJ,CACpBG,OAAO,CAAC,UAAD,CADa,EAEpBA,OAAO,CAAC,YAAD,CAFa,EAGpBA,OAAO,CAAC,mBAAD,CAHa,EAIpBA,OAAO,CAAC,YAAD,CAJa,CAAtB;;AAMA,oBAAI,CAACO,WAAL,CAAiBK,IAAjB,CAAsBf,QAAtB;AACD;AACF,WAhBH,EAiBE,UAAAN,KAAK;AAAA,mBAAIlC,OAAO,CAACC,GAAR,CAAY,YAAUiC,KAAtB,CAAJ;AAAA,WAjBP,EAkBE;AAAA,mBAAMlC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAAA,WAlBF;AAoBD;;;;;;;uBA1MQgD,c,EAAc,mI,EAAA,mI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,8X;AAAA;AAAA;ACZ3B;;AACE;;AAaF;;AACA;;AACE;;AAAQ;AAAA,mBAAS,IAAAY,UAAA,EAAT;AAAqB,WAArB;;AAAuB;;AAAK;;AACpC;;AACA;;AACA;;AAEA;;AAAI;;AAAkB;;AACxB;;AACA;;;;AAtBS;;AAAA;;AAgBC;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAEJ;;AAAA;;AAEiB;;AAAA;;;;;;;;;sEDXVZ,c,EAAc;cAL1B,uDAK0B;eALhB;AACT9C,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEZ3B;AAAA;;;AAAA;AAAA;AAAA;;QAAayD,K;AAMX,qBAAmB7E,EAAnB,EACmBkD,KADnB,EAEmBY,YAFnB,EAGmBX,cAHnB,EAG2C;AAAA;;AACzC,aAAKnD,EAAL,GAAUA,EAAV;AACA,aAAKkD,KAAL,GAAaA,KAAb;AACA,aAAKY,YAAL,GAAoBA,YAApB;AACA,aAAKX,cAAL,GAAsBA,cAAtB;AACD;;;;iCAEK;AACJ,iBAAO;AACL,kBAAM,KAAKnD,EADN;AAEL,qBAAS,KAAKkD,KAFT;AAGL,4BAAgB,KAAKY,YAHhB;AAIL,8BAAkB,KAAKX;AAJlB,WAAP;AAMD,S,CAED;;;;wCACoB;AAClB,cAAI2B,UAAU,GAAU,IAAID,KAAJ,CACtB,CADsB,EAEtB;AACE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CADL;AAEE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAFL;AAGE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAHL;AAIE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAJL;AAKE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CALL;AAME,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CANL;AAOE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAPL;AAQE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CARL;AASE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC;AATL,WAFsB,EAatB;AACE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CADL;AAEE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAFL;AAGE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAHL;AAIE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAJL;AAKE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CALL;AAME,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CANL;AAOE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAPL;AAQE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CARL;AASE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC;AATL,WAbsB,EAwBtB;AACE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CADL;AAEE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAFL;AAGE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAHL;AAIE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAJL;AAKE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CALL;AAME,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CANL;AAOE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CAPL;AAQE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC,CARL;AASE,eAAG,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,IAA/B,EAAoC,IAApC,EAAyC,IAAzC;AATL,WAxBsB,CAAxB;AAoCA,iBAAOC,UAAP;AACD;;;;;;;;;;;;;;;;;;;;;AChEH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAMC,cAAc,GAAG,gBAAvB;AACA,QAAMC,qBAAqB,GAAG,uBAA9B;;QAKaC,W;AAMX,6BAAc;AAAA;AAAG,O,CAEjB;;;;;+CACoB;AAClB;AACA,cAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,MAArB,CAA4B,CAA5B,EAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,EAA6CA,KAA7C,CAAmD,GAAnD,CAAjB,CAFkB,CAGlB;;AACA,cAAKL,QAAQ,CAAC,CAAD,CAAR,KAAgB,cAArB,EAAsC;AACpC;AACA,iBAAKM,KAAL,GAAaN,QAAQ,CAAC,CAAD,CAArB,CAFoC,CAGpC;;AACA,iBAAKO,OAAL;AACD;AACF;;;kCAEM;AACLC,sBAAY,CAACC,OAAb,CAAqBZ,cAArB,EAAqC,KAAKS,KAA1C;;AACA,cAAI,KAAKA,KAAT,EAAgB;AACd,iBAAKI,SAAL,CAAe,KAAKJ,KAApB;AACD;AACF;;;kCAESA,K,EAAa;AACrB,cAAMK,UAAU,GAAG,IAAI,mEAAJ,EAAnB;AACA,eAAKjE,OAAL,GAAeiE,UAAU,CAACC,WAAX,CAAuBN,KAAvB,CAAf;AACA,iBAAO,KAAK5D,OAAZ;AACD;;;qCAES;AACR,iBAAO,KAAKA,OAAZ;AACD;;;mCAEO;AACN,iBAAO,YAAY,KAAK4D,KAAxB;AACD;;;iCAEK;AACJ,eAAKA,KAAL,GAAa,EAAb;AACA,eAAK5D,OAAL,GAAe,IAAf;AACA,eAAK6D,OAAL;AACD;;;sCAEU;AACT,cAAIM,IAAI,GAAG,UAAX;AACAA,cAAI,IAAI,gDAAR;AACAA,cAAI,IAAI,aAAR;AACAA,cAAI,IAAI,cAAc,YAAd,GAA6B,GAArC;AACAA,cAAI,IAAI,sBAAR;AACAA,cAAI,IAAI,eAAe,kCAAf,GAAoD,GAA5D;AACAA,cAAI,IAAI,kBAAkB,wBAA1B;AACA,iBAAOA,IAAP;AACD;;;sCAEU;AACT,cAAI,KAAKnE,OAAL,IAAgB,IAApB,EAA0B;AACxB,mBAAO,KAAKA,OAAL,CAAa,qCAAb,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,IAAP;AACD;AACF;;;;;;;uBAjEUqD,W;AAAW,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVe,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;ACTxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWaC,W;AAIX,2BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFX,aAAAC,SAAA,GAAoB,uBAApB;AAIR,O,CAED;;;;;mCACWjD,K,EAAa;AACtB,cAAIkD,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,8BAAgB;AAAlB,aAAhB;AADO,WAAlB;AAGA,cAAIC,IAAI,GAAG;AACT,qBAASpD;AADA,WAAX;AAGA,iBAAO,KAAKgD,IAAL,CAAUK,IAAV,CAAe,KAAKJ,SAAL,GAAe,cAA9B,EAA8CrD,IAAI,CAACE,SAAL,CAAesD,IAAf,CAA9C,EAAoEF,WAApE,CAAP;AACD,S,CAED;;;;oCACYI,U,EAAoBnD,Q,EAAkBmC,K,EAAa;AAC7D,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,cAAIc,IAAI,GAAG;AACT,0BAAcE,UADL;AAET,yBAAanD;AAFJ,WAAX;AAIA,iBAAO,KAAK6C,IAAL,CAAUK,IAAV,CAAe,KAAKJ,SAAL,GAAe,YAA9B,EAA4CrD,IAAI,CAACE,SAAL,CAAesD,IAAf,CAA5C,EAAkEF,WAAlE,CAAP;AACD,S,CAED;;;;kCACUlD,K,EAAcG,Q,EAAkBmC,K,EAAa;AAErD,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,cAAIc,IAAI,GAAG;AACT,wBAAYpD,KAAK,CAAClD,EADT;AAET,0BAAckD,KAAK,CAACA,KAFX;AAGT,yBAAcG;AAHL,WAAX;AAKA,iBAAO,KAAK6C,IAAL,CAAUO,KAAV,CAAgB,KAAKN,SAAL,GAAe,aAA/B,EAA8CrD,IAAI,CAACE,SAAL,CAAesD,IAAf,CAA9C,EAAoEF,WAApE,CAAP;AACD,S,CAED;;;;0CACkBlD,K,EAAcG,Q,EAAkBmC,K,EAAa;AAE7D,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,cAAIc,IAAI,GAAG;AACT,wBAAYpD,KAAK,CAAClD,EADT;AAET,0BAAckD,KAAK,CAACA,KAFX;AAGT,yBAAcG;AAHL,WAAX;AAKA,iBAAO,KAAK6C,IAAL,CAAUO,KAAV,CAAgB,KAAKN,SAAL,GAAe,wBAA/B,EAAyDrD,IAAI,CAACE,SAAL,CAAesD,IAAf,CAAzD,EAA+EF,WAA/E,CAAP;AACD;;;sCAEa/C,Q,EAAkBmC,K,EAAa;AAC3C,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,iBAAO,KAAKU,IAAL,CAAUQ,GAAV,CAAc,KAAKP,SAAL,GAAe,kBAAf,GAAkC9C,QAAQ,CAAC,IAAD,CAAxD,EAAgE+C,WAAhE,CAAP;AACD;;;oCAGWlD,K,EAAcsC,K,EAAa;AACrC,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,iBAAO,KAAKU,IAAL,WAAiB,KAAKC,SAAL,GAAe,gBAAf,GAAgCjD,KAAK,CAAClD,EAAvD,EAA2DoG,WAA3D,CAAP;AACD;;;yCAEgBZ,K,EAAa;AAC5B,cAAIY,WAAW,GAAG;AAChBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB,kBADO;AAEvB,+BAAiBb;AAFM,aAAhB;AADO,WAAlB;AAMA,iBAAO,KAAKU,IAAL,CAAUQ,GAAV,CAAc,KAAKP,SAAL,GAAe,mBAA7B,EAAkDC,WAAlD,CAAP;AACD;;;;;;;uBAjGUH,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVD,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;ACXxB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMW,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAI/F,OAAO,CAACkC,KAAR,CAAc6D,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BoardComponent } from './board/board.component';\nimport { BoardOfTheDayComponent } from './board-of-the-day/board-of-the-day.component';\n\n\nconst routes: Routes = [\n  { path: '', component: BoardOfTheDayComponent},\n  { path: 'my-boards', component: BoardComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title: string = 'Sudoku Solver Capstone';\n  user_info: Object;\n  loginUrl: string = '';\n\n  constructor(private auth: AuthService) {\n\n  }\n\n  ngOnInit(): void {\n    this.auth.check_token_fragment();\n    this.user_info = this.auth.getUserInfo();\n    this.loginUrl = this.auth.getLoginUrl();\n    console.log(this.loginUrl);\n\n  }\n\n  logout(): void {\n    this.auth.logout();\n    this.user_info = null;\n  }\n}\n","<header>\n    <div class=\"container\">\n        <a href=\"#\" class=\"logo\">Sudoku Solver</a>\n        <nav>\n            <ul>\n                <li><a href=\"#\" routerLink=\"/\">Board of the Day</a></li>\n                <li><a href=\"my-boards\" routerLink=\"/my-boards\">My Boards</a></li>\n                <li *ngIf=\"!user_info\"><a [href]=\"loginUrl\">Login</a></li>\n                <li *ngIf=\"user_info\"><img [src]=\"user_info['picture']\" alt=\"\"></li>\n                <li *ngIf=\"user_info\"><a>{{ user_info['name'] }}</a></li>\n                <li *ngIf=\"user_info\"><a href=\"\" (click)=\"logout()\">Logout</a></li>\n            </ul>\n        </nav>\n    </div>\n</header>\n\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BoardComponent } from './board/board.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BoardOfTheDayComponent } from './board-of-the-day/board-of-the-day.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BoardComponent,\n    BoardOfTheDayComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { Observable } from 'rxjs';\nimport { Board } from '../board/board';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-board-of-the-day',\n  templateUrl: './board-of-the-day.component.html',\n  styleUrls: ['./board-of-the-day.component.scss']\n})\nexport class BoardOfTheDayComponent implements OnInit {\n  board_of_the_day: Board;\n  user_message: string;\n  readonly board_size = [1,2,3,4,5,6,7,8,9];\n  user_boards: Board[];\n  isAdmin: boolean;\n\n  constructor(private _http: HttpService, public auth: AuthService) {\n    let payload = this.auth.getPayload();\n    if (payload == null) { return; }\n    this.isAdmin = payload[\"permissions\"].includes(\"add:sudoku-of-the-day\");\n  }\n\n  ngOnInit(): void {\n    // Initialize empty board\n    this.board_of_the_day = Board.getBlankBoard();\n    this.user_message = \"\";\n\n    // Display the board of the day\n    this.displayBoardOfTheDay();\n  }\n\n  // Set shading\n  setClass(column, row) {\n    let myClasses = {\n      grey_cell: (2 < row && row <= 5) || (2 < column && column <= 5),\n      white_cell: (2 < row && row <= 5) && (2 < column && column <= 5)\n    }\n    return myClasses;\n  }\n\n  // Fetch the board of the day\n  displayBoardOfTheDay(): void {\n    let response: Observable<Object> = this._http.getBoardOfTheDay(this.auth.getToken());\n    response.subscribe(\n      value => {\n\n        // Ensure board of the day is available\n        if (value == null) {\n          this.user_message = \"Board of the day unavailable.\";\n        }\n\n        // Set board object\n        this.board_of_the_day = JSON.parse(JSON.stringify(new Board(\n          value[\"board_id\"],\n          value[\"board_json\"],\n          value[\"board_json_solved\"],\n          value[\"board_json\"])));\n      },\n      error => console.log(\"error: \"+error),\n      () => console.log(\"complete\")\n    );\n  }\n\n  // Reset the board to the original\n  resetBoard(): void {\n    this.board_of_the_day.board = JSON.parse(JSON.stringify(this.board_of_the_day.board_original));\n  }\n\n  // Administrator's ability to change the board of the day\n  saveBoard(): void {\n    let board: Board = this.sanitizeBoardData();\n    let userInfo = this.auth.getUserInfo();\n    if (userInfo == null) {\n      this.user_message = \"Problem with login. Please log out and back in.\";\n      return;\n    }\n    let response: Observable<Object> = this._http.saveBoardOfTheDay(board, userInfo, this.auth.getToken());\n    response.subscribe(\n      value => {\n        this.user_message = \"Saved!\";\n      },\n      error => console.log(\"error: \"+error),\n      () => console.log(\"complete\")\n    );\n  }\n\n  // Sanitize board data; ensure that all input is the same format\n  sanitizeBoardData(): Board {\n    let newBoard: Board = JSON.parse(JSON.stringify(this.board_of_the_day));\n    for (let row = 0; row < Object.keys(newBoard.board).length; row++) {\n      for (let column = 0; column < newBoard.board[row].length; column++) {\n        const element = newBoard.board[row][column];\n        if(typeof element == \"string\"){\n          newBoard.board[row][column] = parseInt(element);\n        } else {\n          newBoard.board[row][column] = element;\n        }\n      }\n    }\n\n    return newBoard;\n  }\n\n  // Detect keyboard input in order to\n  changed(event): void {\n    let sanitizeBoard = this.sanitizeBoardData();\n    if (\n      JSON.stringify(sanitizeBoard.board) ==\n      JSON.stringify(sanitizeBoard.board_solved)) {\n      this.user_message = \"Solved! Congratulations\";\n    } else {\n      this.user_message = \"Not solved yet...\";\n    }\n  }\n}\n","<h1>Board of the Day</h1>\n<p>The Board Of The Day is a fun and easy sudoku puzzle that\n  cannot be saved but will automatically notify you once it\n  has been successfully completed.\n</p>\n<br>\n<br>\n<div class=\"container\">\n  <h3>{{ user_message }}</h3>\n</div>\n<div class=\"container\">\n  <table *ngIf=\"board_of_the_day\" (keyup)=\"changed($event)\">\n    <tr *ngFor=\"let row of board_size; index as i;\">\n        <td><input id=\"{{ i }}-0\" [ngClass]=\"setClass(0, i)\" [(ngModel)]=\"board_of_the_day.board[i][0]\"></td>\n        <td><input id=\"{{ i }}-1\" [ngClass]=\"setClass(1, i)\" [(ngModel)]=\"board_of_the_day.board[i][1]\"></td>\n        <td><input id=\"{{ i }}-2\" [ngClass]=\"setClass(2, i)\" [(ngModel)]=\"board_of_the_day.board[i][2]\"></td>\n        <td><input id=\"{{ i }}-3\" [ngClass]=\"setClass(3, i)\" [(ngModel)]=\"board_of_the_day.board[i][3]\"></td>\n        <td><input id=\"{{ i }}-4\" [ngClass]=\"setClass(4, i)\" [(ngModel)]=\"board_of_the_day.board[i][4]\"></td>\n        <td><input id=\"{{ i }}-5\" [ngClass]=\"setClass(5, i)\" [(ngModel)]=\"board_of_the_day.board[i][5]\"></td>\n        <td><input id=\"{{ i }}-6\" [ngClass]=\"setClass(6, i)\" [(ngModel)]=\"board_of_the_day.board[i][6]\"></td>\n        <td><input id=\"{{ i }}-7\" [ngClass]=\"setClass(7, i)\" [(ngModel)]=\"board_of_the_day.board[i][7]\"></td>\n        <td><input id=\"{{ i }}-8\" [ngClass]=\"setClass(8, i)\" [(ngModel)]=\"board_of_the_day.board[i][8]\"></td>\n    </tr>\n  </table>\n</div>\n<div class=\"container\">\n  <button (click)=\"resetBoard()\">Reset Board</button>\n  <button *ngIf=\"isAdmin\" (click)=\"saveBoard()\">Save Board</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { Observable } from 'rxjs';\nimport { Board } from './board';\nimport { AuthService } from '../services/auth.service';\n\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent implements OnInit {\n    board: Board;\n    user_message: string;\n    readonly board_size = [1,2,3,4,5,6,7,8,9];\n    user_boards: Board[];\n\n    constructor(private _http: HttpService, public auth: AuthService) { }\n\n    ngOnInit() {\n      // Initialize empty board\n      this.board = Board.getBlankBoard();\n      this.user_message = \"\";\n\n      // If the user is logged in and user_boards is empty, attempt loading\n      // the user's boards.\n      if (this.auth.getUserInfo() != null && this.user_boards == null) {\n        this.displayUserBoards();\n      }\n    }\n\n    // Set shading\n    setClass(column, row) {\n      let myClasses = {\n        grey_cell: (2 < row && row <= 5) || (2 < column && column <= 5),\n        white_cell: (2 < row && row <= 5) && (2 < column && column <= 5)\n      }\n      return myClasses;\n    }\n\n\n    // Solve the sudoku puzzle\n    solveRandomBoard() {\n      this.user_message = \"not implemented\";\n    }\n\n    solveBoard() {\n      this.board.board = JSON.parse(JSON.stringify(this.board.board_solved));\n    }\n\n    // Retrieve a new board for the user to solve\n    newBoard() {\n      // TODO(jordanhuus): remove hard code\n      let response: Observable<Object> = this._http.getNewBoard(\n          \"easy\", this.auth.getUserInfo(), this.auth.getToken());\n      response.subscribe(\n        value => {\n          this.board = new Board(\n            value[\"board_id\"],\n            value[\"board_json\"],\n            value[\"board_json_solved\"],\n            value[\"board_json\"]);\n\n          // Display all user boards\n          this.displayUserBoards(value[\"board_id\"]);\n        },\n        error => console.log(\"error: \"+error),\n        () => console.log(\"complete\")\n      );\n    }\n\n    // Display the original version after initially created\n    resetBoard() {\n      this.board.board = JSON.parse(\n        JSON.stringify(this.board.board_original));\n    }\n\n    // Save this.board's progress\n    saveBoard() {\n      let board: Board = this.sanitizeBoardData();\n      let userInfo = this.auth.getUserInfo();\n      if (userInfo == null) {\n        this.user_message = \"Problem with login. Please log out and back in.\";\n        return;\n      }\n      let response: Observable<Object> = this._http.saveBoard(board, userInfo, this.auth.getToken());\n      response.subscribe(\n        value => {\n          this.user_message = \"Saved!\";\n\n          // Display list of user boards\n          this.user_boards = [];\n          for (let i = 0; i < Object.keys(value[\"user_boards\"]).length; i++) {\n            const element = value[\"user_boards\"][i];\n            let newBoard: Board = new Board(\n              element[\"board_id\"],\n              element[\"board_json\"],\n              element[\"board_json_solved\"],\n              element[\"board_json\"]\n            );\n            this.user_boards.push(newBoard);\n          }\n        },\n        error => console.log(\"error: \"+error),\n        () => console.log(\"complete\")\n      );\n    }\n\n    // Sanitize board data; ensure that all input is the same format\n    sanitizeBoardData(): Board {\n      let newBoard: Board = JSON.parse(JSON.stringify(this.board));\n      for (let row = 0; row < Object.keys(newBoard.board).length; row++) {\n        for (let column = 0; column < newBoard.board[row].length; column++) {\n          const element = newBoard.board[row][column];\n          if(typeof element == \"string\"){\n            newBoard.board[row][column] = parseInt(element);\n          } else {\n            newBoard.board[row][column] = element;\n          }\n        }\n      }\n\n      return newBoard;\n    }\n\n    // Detect keyboard input in order to\n    changed(event): void {\n      let sanitizeBoard = this.sanitizeBoardData();\n      if (\n        JSON.stringify(sanitizeBoard.board) ==\n        JSON.stringify(sanitizeBoard.board_solved)) {\n        this.user_message = \"Solved! Congratulations\";\n      } else {\n        this.user_message = \"Not solved yet...\";\n      }\n    }\n\n    // Get a specific board from the server\n    getBoard(i: number): void {\n      this.board = JSON.parse(JSON.stringify(new Board(\n        this.user_boards[i].id,\n        this.user_boards[i].board,\n        this.user_boards[i].board_solved,\n        this.user_boards[i].board)));\n    }\n\n    // Display all of the user's saved boards\n    displayUserBoards(main_board_id: number = null): void {\n      let response: Observable<Object> = this._http.getUserBoards(this.auth.getUserInfo(), this.auth.getToken());\n      response.subscribe(\n        value => {\n          // User has no saved boards\n          if (value == null || value == \"\") { return }\n\n          // Display the main board based on ID - or - random (unspecified) board\n          let chosen_board_index: number = 0;\n          if (main_board_id != null) {\n            for (let i=0; i < Object.keys(value).length; i++) {\n              if (value[i].board_id == main_board_id) {\n                chosen_board_index = i;\n              }\n            }\n          }\n\n          // Retrieve user's baord data\n          this.board = JSON.parse(JSON.stringify(new Board(\n            value[chosen_board_index][\"board_id\"],\n            value[chosen_board_index][\"board_json\"],\n            value[chosen_board_index][\"board_json_solved\"],\n            value[chosen_board_index][\"board_json\"])));\n\n          // Display list of user boards\n          this.user_boards = [];\n          for (let i = 0; i < Object.keys(value).length; i++) {\n            const element = value[i];\n            let newBoard: Board = new Board(\n              element[\"board_id\"],\n              element[\"board_json\"],\n              element[\"board_json_solved\"],\n              element[\"board_json\"]\n            );\n            this.user_boards.push(newBoard);\n          }\n        },\n        error => console.log(\"error: \"+error),\n        () => console.log(\"complete\")\n      );\n    }\n\n    deleteBoard(i: number): void {\n\n      // DELETE request\n      let response: Observable<Object> = this._http.deleteBoard(this.board, this.auth.getToken());\n      response.subscribe(\n        value => {\n          this.user_message = \"\";\n\n          // Display list of user boards\n          this.user_boards = [];\n          for (let i = 0; i < Object.keys(value).length; i++) {\n            const element = value[i];\n            let newBoard: Board = new Board(\n              element[\"board_id\"],\n              element[\"board_json\"],\n              element[\"board_json_solved\"],\n              element[\"board_json\"]\n            );\n            this.user_boards.push(newBoard);\n          }\n        },\n        error => console.log(\"error: \"+error),\n        () => console.log(\"complete\")\n      );\n    }\n}\n","<div class=\"container\">\n  <table *ngIf=\"board\" (keyup)=\"changed($event)\">\n    <tr *ngFor=\"let row of board_size; index as i;\">\n        <td><input [ngClass]=\"setClass(0, i)\" [(ngModel)]=\"board.board[i][0]\"></td>\n        <td><input [ngClass]=\"setClass(1, i)\" [(ngModel)]=\"board.board[i][1]\"></td>\n        <td><input [ngClass]=\"setClass(2, i)\" [(ngModel)]=\"board.board[i][2]\"></td>\n        <td><input [ngClass]=\"setClass(3, i)\" [(ngModel)]=\"board.board[i][3]\"></td>\n        <td><input [ngClass]=\"setClass(4, i)\" [(ngModel)]=\"board.board[i][4]\"></td>\n        <td><input [ngClass]=\"setClass(5, i)\" [(ngModel)]=\"board.board[i][5]\"></td>\n        <td><input [ngClass]=\"setClass(6, i)\" [(ngModel)]=\"board.board[i][6]\"></td>\n        <td><input [ngClass]=\"setClass(7, i)\" [(ngModel)]=\"board.board[i][7]\"></td>\n        <td><input [ngClass]=\"setClass(8, i)\" [(ngModel)]=\"board.board[i][8]\"></td>\n    </tr>\n  </table>\n</div>\n<div class=\"container\">\n  <button (click)=\"solveBoard()\">Solve</button>\n  <button *ngIf=\"auth.payload\" (click)=\"newBoard()\">New Board</button>\n  <button *ngIf=\"auth.payload\" (click)=\"resetBoard()\">Reset Board</button>\n  <button *ngIf=\"auth.payload\" (click)=\"saveBoard()\">Save Board</button>\n  <!-- <button *ngIf=\"auth.payload\" (click)=\"getBoard()\">Get Board</button> -->\n  <h3>{{ user_message }}</h3>\n</div>\n<div class=\"container\" *ngIf=\"user_boards\">\n  <h3>Saved Boards</h3>\n  <ul class=\"saved_user_board_li\" *ngFor=\"let board_item of user_boards; index as i;\">\n    <li (click)=\"getBoard(i)\">\n      <table>\n        <tr *ngFor=\"let row of board_size; index as i;\">\n            <td><input [ngClass]=\"setClass(0, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][0]\" disabled></td>\n            <td><input [ngClass]=\"setClass(1, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][1]\" disabled></td>\n            <td><input [ngClass]=\"setClass(2, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][2]\" disabled></td>\n            <td><input [ngClass]=\"setClass(3, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][3]\" disabled></td>\n            <td><input [ngClass]=\"setClass(4, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][4]\" disabled></td>\n            <td><input [ngClass]=\"setClass(5, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][5]\" disabled></td>\n            <td><input [ngClass]=\"setClass(6, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][6]\" disabled></td>\n            <td><input [ngClass]=\"setClass(7, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][7]\" disabled></td>\n            <td><input [ngClass]=\"setClass(8, i)\" class=\"saved_user_board\" [(ngModel)]=\"board_item.board[i][8]\" disabled></td>\n        </tr>\n      </table>\n      <button (click)=\"deleteBoard(i)\">Delete Board</button>\n    </li>\n  </ul>\n</div>\n","export class Board {\n  public id: number;\n  public board: Object;\n  public board_solved: Object;\n  public board_original: Object;\n\n  public constructor(id: number,\n                     board: Object,\n                     board_solved: Object,\n                     board_original: Object) {\n    this.id = id;\n    this.board = board;\n    this.board_solved = board_solved;\n    this.board_original = board_original;\n  }\n\n  format(): Object {\n    return {\n      \"id\": this.id,\n      \"board\": this.board,\n      \"board_solved\": this.board_solved,\n      \"board_original\": this.board_original\n    }\n  }\n\n  // Returns a blank board Object\n  static getBlankBoard(): Board {\n    let blankBoard: Board = new Board(\n      0,\n      {\n        0: [null,null,null,null,null,null,null,null,null],\n        1: [null,null,null,null,null,null,null,null,null],\n        2: [null,null,null,null,null,null,null,null,null],\n        3: [null,null,null,null,null,null,null,null,null],\n        4: [null,null,null,null,null,null,null,null,null],\n        5: [null,null,null,null,null,null,null,null,null],\n        6: [null,null,null,null,null,null,null,null,null],\n        7: [null,null,null,null,null,null,null,null,null],\n        8: [null,null,null,null,null,null,null,null,null],\n      },\n      {\n        0: [null,null,null,null,null,null,null,null,null],\n        1: [null,null,null,null,null,null,null,null,null],\n        2: [null,null,null,null,null,null,null,null,null],\n        3: [null,null,null,null,null,null,null,null,null],\n        4: [null,null,null,null,null,null,null,null,null],\n        5: [null,null,null,null,null,null,null,null,null],\n        6: [null,null,null,null,null,null,null,null,null],\n        7: [null,null,null,null,null,null,null,null,null],\n        8: [null,null,null,null,null,null,null,null,null],\n      },\n      {\n        0: [null,null,null,null,null,null,null,null,null],\n        1: [null,null,null,null,null,null,null,null,null],\n        2: [null,null,null,null,null,null,null,null,null],\n        3: [null,null,null,null,null,null,null,null,null],\n        4: [null,null,null,null,null,null,null,null,null],\n        5: [null,null,null,null,null,null,null,null,null],\n        6: [null,null,null,null,null,null,null,null,null],\n        7: [null,null,null,null,null,null,null,null,null],\n        8: [null,null,null,null,null,null,null,null,null],\n      }\n    );\n    return blankBoard;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nconst JWTS_LOCAL_KEY = 'JWTS_LOCAL_KEY';\nconst JWTS_ACTIVE_INDEX_KEY = 'JWTS_ACTIVE_INDEX_KEY';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  token: string;\n  payload: any;\n\n\n  constructor() { }\n\n  // invoked in app.component on load\n  check_token_fragment(): void {\n    // parse the fragment\n    const fragment = window.location.hash.substr(1).split('&')[0].split('=');\n    // check if the fragment includes the access token\n    if ( fragment[0] === 'access_token' ) {\n      // add the access token to the jwt\n      this.token = fragment[1];\n      // save jwts to localstore\n      this.set_jwt();\n    }\n  }\n\n  set_jwt(): void {\n    localStorage.setItem(JWTS_LOCAL_KEY, this.token);\n    if (this.token) {\n      this.decodeJWT(this.token);\n    }\n  }\n\n  decodeJWT(token: string): void {\n    const jwtservice = new JwtHelperService();\n    this.payload = jwtservice.decodeToken(token);\n    return this.payload;\n  }\n\n  getPayload(): any {\n    return this.payload;\n  }\n\n  getToken(): string {\n    return \"bearer \" + this.token;\n  }\n\n  logout(): void {\n    this.token = '';\n    this.payload = null;\n    this.set_jwt();\n  }\n\n  getLoginUrl(): string {\n    let link = 'https://';\n    link += 'jordan-flask-authentication-practice.auth0.com';\n    link += '/authorize?';\n    link += 'audience=' + 'sudoku-api' + '&';\n    link += 'response_type=token&';\n    link += 'client_id=' + 'hTHs2lbL26VDIPLLzFffuWhsoJItrYDG' + '&';\n    link += 'redirect_uri=' + 'http://localhost:4200/';\n    return link;\n  }\n\n  getUserInfo(): Object {\n    if (this.payload != null) {\n      return this.payload[\"http://www.jordanhuus.com/user_info\"];\n    } else {\n      return null;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Board } from '../board/board';\n\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  readonly solve_url: string = \"http://127.0.0.1:8000\";\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  // Post request to solve the sudoku puzzle\n  solveBoard(board: Object): Observable<Object> {\n    let httpOptions = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    };\n    let body = {\n      \"board\": board\n    }\n    return this.http.post(this.solve_url+\"/solve-board\", JSON.stringify(body), httpOptions);\n  }\n\n  // Post request to solve the sudoku puzzle\n  getNewBoard(difficulty: string, userInfo: Object, token: string): Observable<Object> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    let body = {\n      \"difficulty\": difficulty,\n      \"user_info\": userInfo\n    }\n    return this.http.post(this.solve_url+\"/board-new\", JSON.stringify(body), httpOptions);\n  }\n\n  // Save the current boards progress\n  saveBoard(board: Board, userInfo: Object, token: string): Observable<Object> {\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    let body = {\n      \"board_id\": board.id,\n      \"board_json\": board.board,\n      \"user_info\":  userInfo\n    }\n    return this.http.patch(this.solve_url+\"/board-save\", JSON.stringify(body), httpOptions);\n  }\n\n  // Save the current boards progress\n  saveBoardOfTheDay(board: Board, userInfo: Object, token: string): Observable<Object> {\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    let body = {\n      \"board_id\": board.id,\n      \"board_json\": board.board,\n      \"user_info\":  userInfo\n    }\n    return this.http.patch(this.solve_url+\"/board-of-the-day-save\", JSON.stringify(body), httpOptions);\n  }\n\n  getUserBoards(userInfo: Object, token: string): Observable<Object> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    return this.http.get(this.solve_url+\"/board-get-user/\"+userInfo[\"id\"], httpOptions);\n  }\n\n\n  deleteBoard(board: Board, token: string): Observable<Object> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    return this.http.delete(this.solve_url+\"/board-delete/\"+board.id, httpOptions);\n  }\n\n  getBoardOfTheDay(token: string): Observable<Object> {\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    };\n    return this.http.get(this.solve_url+\"/board-of-the-day\", httpOptions);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}